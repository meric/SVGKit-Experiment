// Built-in types: number double string

// SVG literals

literal none inherit currentColor disable magnify defer meet slice xMinYMin
literal xMidYMin xMaxYMin xMinYMid xMidYMid xMaxYMid xMinYMax xMidYMax xMaxYMax
literal matrix translate scale rotate skewX skewY %,SKPercent em,SKEM ex,SKEX
literal px,SKPX in,SKIN cm,SKCM mm,SKMM pt,SKPT pc,SKPC deg,SKDEG grad,SKGRAD
literal rad,SKRAD Hz,SKHZ kHz,SKKHZ normal italic oblique small-caps bold bolder
literal lighter 100 200 300 400 500 600 700 800 900 wider narrower
literal ultra-condensed extra-condensed condensed semi-condensed semi-expanded
literal expanded extra-expanded ultra-expanded caption icon menu message-box
literal small-caption status-bar kerning underline overline line-through blink
literal rgba,SKRGBA rgb,SKRGB #,SKHASH

// Literal groups

ltype inherit inherit
ltype none none
ltype normal normal
ltype preserveAspectRatio.defer defer
ltype preserveAspectRatio.align xMinYMin xMidYMin xMaxYMin xMinYMid xMidYMid
ltype preserveAspectRatio.align xMaxYMid xMinYMax xMidYMax xMaxYMax
ltype preserveAspectRatio.meetOrSlice=meet meet slice
ltype length.unit % em ex px in cm mm pt pc
ltype angle.unit deg grad rad
ltype frequency.unit Hz kHz
ltype transform.method matrix rotate translate scale rotate skewX skewY
ltype font.style=normal normal italic oblique inherit
ltype font.variant=normal normal small-caps inherit
ltype font.weight=inherit inherit normal bold bolder lighter 100 200 300 400
ltype font.weight 500 600 700 800 900
ltype font.stretch=normal normal wider narrower ultra-condensed extra-condensed
ltype font.stretch condensed semi-condensed semi-expanded expanded
ltype font.stretch extra-expanded ultra-expanded inherit
ltype font.literal caption icon menu message-box small-caption status-bar
ltype kerning kerning
ltype text-decoration.decoration underline overline line-through blink
ltype color.type rgba rgb # currentColor

// Compound types

// All valid transforms
// The [...] syntax indicates what the valid array sizes are. 
// Use [] if any array size is valid.
// [1,3] means array sized 1 or 3 is valid
type transform {method:transform.method==matrix} ( {values:number[6]} )
type transform {method:transform.method==rotate} ( {values:number[1,3]} )
type transform {method:transform.method==translate} ( {values:number[1,2]} )
type transform {method:transform.method==scale} ( {values:number[1,2]} )
type transform {method:transform.method==skewX} ( {values:number[1]} )
type transform {method:transform.method==skewY} ( {values:number[1]} )

// There is ambiguity with the two length grammars.
// Put the one that is hardest to match first.
type length {value:double} {unit:length.unit}
type length {value:double}

type inner-color {type:inherit}
type inner-color {type:color.type==currentColor}
type inner-color {type:color.type==#} {value:string}
type inner-color {type:color.type} ( {array:number[]} )

// Cannot separate array into r, g, b, a components;  
// Manually implement an additional category for SKColor to do this. 
type color {type:inherit}
type color {type:color.type==#} {value:string}
type color {type:color.type==rgba} ( {array:number[4]} )
type color {type:color.type==rgb} ( {array:number[3]} )

// All combinations of preserveAspectRatio
type preserveAspectRatio {align:preserveAspectRatio.align}
type preserveAspectRatio {defer:preserveAspectRatio.defer} {align:preserveAspectRatio.align}
type preserveAspectRatio {defer:preserveAspectRatio.defer} {align:preserveAspectRatio.align} {meetOrSlice:preserveAspectRatio.meetOrSlice}
type preserveAspectRatio {align:preserveAspectRatio.align} {meetOrSlice:preserveAspectRatio.meetOrSlice}

// Map attributes to types
attribute id string
attribute width length
attribute height length
attribute x length
attribute y length
attribute transform transform[]
attribute class string[]
attribute color color
attribute flood-color inner-color
attribute flood-opacity double
attribute preserveAspectRatio preserveAspectRatio

