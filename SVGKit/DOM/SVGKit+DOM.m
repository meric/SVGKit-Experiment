// autogenerated
// autogenerated

#import "SVGKit+DOM.h"
#import "SVGKit.h"

BOOL SKScanArray(NSScanner* scanner, NSArray** ptr, 
                 BOOL (*SKScanFN)(NSScanner*, id*), NSArray* valid) {
  NSUInteger location = scanner.scanLocation;
  NSMutableArray *array = [[[NSMutableArray alloc] init] autorelease];
  BOOL first = YES;
  while (true) {
    NSUInteger location = scanner.scanLocation;
    if (!first && !SKScanSeparator(scanner, nil)) {
        break;
    }
    first = NO;
    SKScanWhitespaces(scanner, nil);
    id object;
    if (SKScanFN(scanner, &object)) {
        [array addObject:(id)object];
        continue;
    }
    [scanner setScanLocation:location];
    break;
  }
  BOOL success = NO;
  if (valid && [valid count] > 0) {
    for (NSNumber *number in valid) {
      if ([array count] == [number intValue]) {
        success = YES;
        break;
      }
    }
  }
  else success = YES;
  if (success) {
    *ptr = array;
    return YES;
  }
  scanner.scanLocation = location;
  return NO;
}

// All literals in SVG specification.
NSString* SKLiteralString[SKUndefined] = { 
  @"100",
  @"200",
  @"300",
  @"400",
  @"500",
  @"600",
  @"700",
  @"800",
  @"900",
  @"bidi-override",
  @"blink",
  @"bold",
  @"bolder",
  @"cm",
  @"caption",
  @"condensed",
  @"currentColor",
  @"deg",
  @"defer",
  @"disable",
  @"em",
  @"ex",
  @"embed",
  @"end",
  @"expanded",
  @"extra-condensed",
  @"extra-expanded",
  @"grad",
  @"#",
  @"Hz",
  @"in",
  @"icon",
  @"inherit",
  @"italic",
  @"kHz",
  @"kerning",
  @"lighter",
  @"line-through",
  @"ltr",
  @"mm",
  @"magnify",
  @"matrix",
  @"meet",
  @"menu",
  @"message-box",
  @"middle",
  @"narrower",
  @"none",
  @"normal",
  @"oblique",
  @"overline",
  @"pc",
  @"pt",
  @"px",
  @"%",
  @"rad",
  @"rgb",
  @"rgba",
  @"rotate",
  @"rtl",
  @"scale",
  @"semi-condensed",
  @"semi-expanded",
  @"skewX",
  @"skewY",
  @"slice",
  @"small-caps",
  @"small-caption",
  @"start",
  @"status-bar",
  @"translate",
  @"ultra-condensed",
  @"ultra-expanded",
  @"underline",
  @"wider",
  @"xMaxYMax",
  @"xMaxYMid",
  @"xMaxYMin",
  @"xMidYMax",
  @"xMidYMid",
  @"xMidYMin",
  @"xMinYMax",
  @"xMinYMid",
  @"xMinYMin",
};

BOOL SKLiteralInGroup(SKLiteral literal, SKLiteral *valid) {
  while(*valid != SKUndefined) {
    if (literal == *valid++) {
      return YES;
    }
  }
  return NO;
}

BOOL SKScanLiteral(NSScanner* scanner, SKLiteral* ptr, SKLiteral* valid) {
  NSUInteger location = scanner.scanLocation;
  SKScanWhitespaces(scanner, nil);
  int i = 0;
  while(valid[i] != SKUndefined) {
    NSString *s = SKLiteralString[valid[i]];
    if ([scanner scanString:s intoString:nil]) {
      *ptr = valid[i];
      return YES;
    }
    i++;
  }
  scanner.scanLocation = location;
  return NO;
}

SKLiteral SKStyle__fontLiteralLiterals[] = {
  SKCaption,SKIcon,SKMenu,SKMessageBox,SKSmallCaption,SKStatusBar,SKUndefined
};

BOOL SKScanFontLiteralForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__fontLiteralLiterals);
}

SKLiteral SKPreserveAspectRatio__deferLiterals[] = {
  SKDefer,SKUndefined
};

BOOL SKScanDeferForPreserveAspectRatio(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKPreserveAspectRatio__deferLiterals);
}

SKLiteral SKLength__unitLiterals[] = {
  SKPercent,SKEM,SKEX,SKPX,SKIN,SKCM,SKMM,SKPT,SKPC,SKUndefined
};

BOOL SKScanUnitForLength(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKLength__unitLiterals);
}

SKLiteral SKStyle__fontVariantLiterals[] = {
  SKNormal,SKSmallCaps,SKInherit,SKUndefined
};

BOOL SKScanFontVariantForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__fontVariantLiterals);
}

SKLiteral SKStyle__fontStretchLiterals[] = {
  SKNormal,SKWider,SKNarrower,SKUltraCondensed,SKExtraCondensed,SKCondensed,SKSemiCondensed,SKSemiExpanded,SKExpanded,SKExtraExpanded,SKUltraExpanded,SKInherit,SKUndefined
};

BOOL SKScanFontStretchForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__fontStretchLiterals);
}

SKLiteral SKStyle__kerningLiterals[] = {
  SKKerning,SKUndefined
};

BOOL SKScanKerningForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__kerningLiterals);
}

SKLiteral SKTransform__methodLiterals[] = {
  SKMatrix,SKRotate,SKTranslate,SKScale,SKRotate,SKSkewX,SKSkewY,SKUndefined
};

BOOL SKScanMethodForTransform(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKTransform__methodLiterals);
}

SKLiteral SKAngle__unitLiterals[] = {
  SKDEG,SKGRAD,SKRAD,SKUndefined
};

BOOL SKScanUnitForAngle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKAngle__unitLiterals);
}

SKLiteral SKStyle__textDecorationLiterals[] = {
  SKUnderline,SKOverline,SKLineThrough,SKBlink,SKUndefined
};

BOOL SKScanTextDecorationForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__textDecorationLiterals);
}

SKLiteral SKStyle__directionLiterals[] = {
  SKLtr,SKRtl,SKInherit,SKUndefined
};

BOOL SKScanDirectionForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__directionLiterals);
}

SKLiteral SKStyle__fontWeightLiterals[] = {
  SKInherit,SKNormal,SKBold,SKBolder,SKLighter,SK100,SK200,SK300,SK400,SK500,SK600,SK700,SK800,SK900,SKUndefined
};

BOOL SKScanFontWeightForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__fontWeightLiterals);
}

SKLiteral SKNormalLiterals[] = {
  SKNormal,SKUndefined
};

BOOL SKScanNormal(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKNormalLiterals);
}

SKLiteral SKStyle__fontStyleLiterals[] = {
  SKNormal,SKItalic,SKOblique,SKInherit,SKUndefined
};

BOOL SKScanFontStyleForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__fontStyleLiterals);
}

SKLiteral SKStyle__colorLiterals[] = {
  SKRGBA,SKRGB,SKHASH,SKCurrentColor,SKUndefined
};

BOOL SKScanColorForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__colorLiterals);
}

SKLiteral SKZoomAndPanLiterals[] = {
  SKDisable,SKMagnify,SKUndefined
};

BOOL SKScanZoomAndPan(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKZoomAndPanLiterals);
}

SKLiteral SKStyle__textAnchorLiterals[] = {
  SKStart,SKMiddle,SKEnd,SKInherit,SKUndefined
};

BOOL SKScanTextAnchorForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__textAnchorLiterals);
}

SKLiteral SKNoneLiterals[] = {
  SKNone,SKUndefined
};

BOOL SKScanNone(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKNoneLiterals);
}

SKLiteral SKPreserveAspectRatio__alignLiterals[] = {
  SKXMinYMin,SKXMidYMin,SKXMaxYMin,SKXMinYMid,SKXMidYMid,SKXMaxYMid,SKXMinYMax,SKXMidYMax,SKXMaxYMax,SKUndefined
};

BOOL SKScanAlignForPreserveAspectRatio(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKPreserveAspectRatio__alignLiterals);
}

SKLiteral SKPreserveAspectRatio__meetOrSliceLiterals[] = {
  SKMeet,SKSlice,SKUndefined
};

BOOL SKScanMeetOrSliceForPreserveAspectRatio(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKPreserveAspectRatio__meetOrSliceLiterals);
}

SKLiteral SKInheritLiterals[] = {
  SKInherit,SKUndefined
};

BOOL SKScanInherit(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKInheritLiterals);
}

SKLiteral SKFrequency__unitLiterals[] = {
  SKHZ,SKKHZ,SKUndefined
};

BOOL SKScanUnitForFrequency(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKFrequency__unitLiterals);
}

SKLiteral SKStyle__unicodeBidiLiterals[] = {
  SKNormal,SKEmbed,SKBidiOverride,SKInherit,SKUndefined
};

BOOL SKScanUnicodeBidiForStyle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKStyle__unicodeBidiLiterals);
}


// SKTransform
@implementation SKTransform
@synthesize values;
@synthesize method;

- (id)init {
  self = [super init];
  if (self) { 
    method = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  self.values = nil;
  [super dealloc];
}

- (NSString*)description { 
  if (values != nil && ([values count] == 6) && method == SKMatrix) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.method],
       @"(",
       [values componentsJoinedByString:@" "],
       @")"];
  }
  
  if (values != nil && ([values count] == 1 || [values count] == 3) && method == SKRotate) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.method],
       @"(",
       [values componentsJoinedByString:@" "],
       @")"];
  }
  
  if (values != nil && ([values count] == 1 || [values count] == 2) && method == SKTranslate) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.method],
       @"(",
       [values componentsJoinedByString:@" "],
       @")"];
  }
  
  if (values != nil && ([values count] == 1 || [values count] == 2) && method == SKScale) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.method],
       @"(",
       [values componentsJoinedByString:@" "],
       @")"];
  }
  
  if (values != nil && ([values count] == 1) && method == SKSkewX) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.method],
       @"(",
       [values componentsJoinedByString:@" "],
       @")"];
  }
  
  if (values != nil && ([values count] == 1) && method == SKSkewY) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.method],
       @"(",
       [values componentsJoinedByString:@" "],
       @")"];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanTransform(NSScanner* scanner, SKTransform** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKTransform* result = [[SKTransform new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral method0;
    BOOL b0 = SKScanMethodForTransform(scanner,&method0);
    if (b0 && method0 != SKMatrix) b0=NO;
    if (b0) result.method = method0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* values2;
    BOOL b2 = SKScanArray(scanner,&values2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:6],nil]);
    if (b2) result.values = values2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKTransform* result = [[SKTransform new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral method0;
    BOOL b0 = SKScanMethodForTransform(scanner,&method0);
    if (b0 && method0 != SKRotate) b0=NO;
    if (b0) result.method = method0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* values2;
    BOOL b2 = SKScanArray(scanner,&values2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:1],
        [NSNumber numberWithInt:3],nil]);
    if (b2) result.values = values2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKTransform* result = [[SKTransform new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral method0;
    BOOL b0 = SKScanMethodForTransform(scanner,&method0);
    if (b0 && method0 != SKTranslate) b0=NO;
    if (b0) result.method = method0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* values2;
    BOOL b2 = SKScanArray(scanner,&values2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:1],
        [NSNumber numberWithInt:2],nil]);
    if (b2) result.values = values2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKTransform* result = [[SKTransform new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral method0;
    BOOL b0 = SKScanMethodForTransform(scanner,&method0);
    if (b0 && method0 != SKScale) b0=NO;
    if (b0) result.method = method0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* values2;
    BOOL b2 = SKScanArray(scanner,&values2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:1],
        [NSNumber numberWithInt:2],nil]);
    if (b2) result.values = values2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKTransform* result = [[SKTransform new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral method0;
    BOOL b0 = SKScanMethodForTransform(scanner,&method0);
    if (b0 && method0 != SKSkewX) b0=NO;
    if (b0) result.method = method0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* values2;
    BOOL b2 = SKScanArray(scanner,&values2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:1],nil]);
    if (b2) result.values = values2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKTransform* result = [[SKTransform new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral method0;
    BOOL b0 = SKScanMethodForTransform(scanner,&method0);
    if (b0 && method0 != SKSkewY) b0=NO;
    if (b0) result.method = method0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* values2;
    BOOL b2 = SKScanArray(scanner,&values2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:1],nil]);
    if (b2) result.values = values2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanTransformArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanTransform, NULL);
}

// SKFontFamily
@implementation SKFontFamily
@synthesize array;
@synthesize inherit;

- (id)init {
  self = [super init];
  if (self) { 
    inherit = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  self.array = nil;
  [super dealloc];
}

- (NSString*)description { 
  if (inherit != SKUndefined && SKLiteralInGroup(inherit,SKInheritLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.inherit]];
  }
  
  if (array != nil && 1) {
    return [NSString stringWithFormat:@"%@",[array componentsJoinedByString:@","]];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanFontFamily(NSScanner* scanner, SKFontFamily** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKFontFamily* result = [[SKFontFamily new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral inherit0;
    BOOL b0 = SKScanInherit(scanner,&inherit0);
    if (b0) result.inherit = inherit0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKFontFamily* result = [[SKFontFamily new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    NSArray* array0;
    BOOL b0 = SKScanArray(scanner,&array0,SKScanString,NULL);
    if (b0) result.array = array0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanFontFamilyArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanFontFamily, NULL);
}

// SKLength
@implementation SKLength
@synthesize unit;
@synthesize value;

- (id)init {
  self = [super init];
  if (self) { 
    unit = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  [super dealloc];
}

- (NSString*)description { 
  if (unit != SKUndefined && SKLiteralInGroup(unit,SKLength__unitLiterals) && 1) {
    return [NSString stringWithFormat:@"%f%@",value,
       SKLiteralString[self.unit]];
  }
  
  if (1) {
    return [NSString stringWithFormat:@"%f",value];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanLength(NSScanner* scanner, SKLength** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKLength* result = [[SKLength new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    double value0;
    BOOL b0 = SKScanDouble(scanner,&value0);
    if (b0) result.value = value0;

    SKLiteral unit1;
    BOOL b1 = SKScanUnitForLength(scanner,&unit1);
    if (b1) result.unit = unit1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKLength* result = [[SKLength new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    double value0;
    BOOL b0 = SKScanDouble(scanner,&value0);
    if (b0) result.value = value0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanLengthArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanLength, NULL);
}

// SKInnerColor
@implementation SKInnerColor
@synthesize type;
@synthesize value;

- (id)init {
  self = [super init];
  if (self) { 
    type = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  self.value = nil;
  [super dealloc];
}

- (NSString*)description { 
  if (type != SKUndefined && SKLiteralInGroup(type,SKInheritLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.type]];
  }
  
  if (type == SKCurrentColor) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.type]];
  }
  
  if (type == SKHASH && value != nil) {
    return [NSString stringWithFormat:@"%@%@",SKLiteralString[self.type],
       value];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanInnerColor(NSScanner* scanner, SKInnerColor** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKInnerColor* result = [[SKInnerColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanInherit(scanner,&type0);
    if (b0) result.type = type0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKInnerColor* result = [[SKInnerColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanColorForStyle(scanner,&type0);
    if (b0 && type0 != SKCurrentColor) b0=NO;
    if (b0) result.type = type0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKInnerColor* result = [[SKInnerColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanColorForStyle(scanner,&type0);
    if (b0 && type0 != SKHASH) b0=NO;
    if (b0) result.type = type0;

    NSString* value1;
    BOOL b1 = SKScanString(scanner,&value1);
    if (b1) result.value = value1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanInnerColorArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanInnerColor, NULL);
}

// SKColor
@implementation SKColor
@synthesize array;
@synthesize type;
@synthesize value;

- (id)init {
  self = [super init];
  if (self) { 
    type = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  self.array = nil;
  self.value = nil;
  [super dealloc];
}

- (NSString*)description { 
  if (array != nil && ([array count] == 4) && type == SKRGBA) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.type],
       @"(",
       [array componentsJoinedByString:@","],
       @")"];
  }
  
  if (array != nil && ([array count] == 3) && type == SKRGB) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.type],
       @"(",
       [array componentsJoinedByString:@","],
       @")"];
  }
  
  if (type != SKUndefined && SKLiteralInGroup(type,SKInheritLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.type]];
  }
  
  if (type == SKHASH && value != nil) {
    return [NSString stringWithFormat:@"%@%@",SKLiteralString[self.type],
       value];
  }
  
  if (array != nil && ([array count] == 4) && type == SKRGBA) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.type],
       @"(",
       [array componentsJoinedByString:@","],
       @")"];
  }
  
  if (array != nil && ([array count] == 3) && type == SKRGB) {
    return [NSString stringWithFormat:@"%@%@%@%@",SKLiteralString[self.type],
       @"(",
       [array componentsJoinedByString:@","],
       @")"];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanColor(NSScanner* scanner, SKColor** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanColorForStyle(scanner,&type0);
    if (b0 && type0 != SKRGBA) b0=NO;
    if (b0) result.type = type0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* array2;
    BOOL b2 = SKScanArray(scanner,&array2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:4],nil]);
    if (b2) result.array = array2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanColorForStyle(scanner,&type0);
    if (b0 && type0 != SKRGB) b0=NO;
    if (b0) result.type = type0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* array2;
    BOOL b2 = SKScanArray(scanner,&array2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:3],nil]);
    if (b2) result.array = array2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanInherit(scanner,&type0);
    if (b0) result.type = type0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanColorForStyle(scanner,&type0);
    if (b0 && type0 != SKHASH) b0=NO;
    if (b0) result.type = type0;

    NSString* value1;
    BOOL b1 = SKScanString(scanner,&value1);
    if (b1) result.value = value1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanColorForStyle(scanner,&type0);
    if (b0 && type0 != SKRGBA) b0=NO;
    if (b0) result.type = type0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* array2;
    BOOL b2 = SKScanArray(scanner,&array2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:4],nil]);
    if (b2) result.array = array2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanColorForStyle(scanner,&type0);
    if (b0 && type0 != SKRGB) b0=NO;
    if (b0) result.type = type0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* array2;
    BOOL b2 = SKScanArray(scanner,&array2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:3],nil]);
    if (b2) result.array = array2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanColorArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanColor, NULL);
}

// SKTextDecorationLiteral
@implementation SKTextDecorationLiteral
@synthesize decoration;

- (id)init {
  self = [super init];
  if (self) { 
    decoration = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  [super dealloc];
}

- (NSString*)description { 
  if (decoration != SKUndefined && SKLiteralInGroup(decoration,SKStyle__textDecorationLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.decoration]];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanTextDecorationLiteral(NSScanner* scanner, SKTextDecorationLiteral** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKTextDecorationLiteral* result = [[SKTextDecorationLiteral new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral decoration0;
    BOOL b0 = SKScanTextDecorationForStyle(scanner,&decoration0);
    if (b0) result.decoration = decoration0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanTextDecorationLiteralArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanTextDecorationLiteral, NULL);
}

// SKPreserveAspectRatio
@implementation SKPreserveAspectRatio
@synthesize defer;
@synthesize align;
@synthesize meetOrSlice;

- (id)init {
  self = [super init];
  if (self) { 
    defer = SKUndefined;
    align = SKUndefined;
    meetOrSlice = SKMeet;
  }
  return self;
}

- (void)dealloc { 
  [super dealloc];
}

- (NSString*)description { 
  if (align != SKUndefined && SKLiteralInGroup(align,SKPreserveAspectRatio__alignLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.align]];
  }
  
  if (defer != SKUndefined && SKLiteralInGroup(defer,SKPreserveAspectRatio__deferLiterals) && align != SKUndefined && SKLiteralInGroup(align,SKPreserveAspectRatio__alignLiterals)) {
    return [NSString stringWithFormat:@"%@%@",SKLiteralString[self.defer],
       SKLiteralString[self.align]];
  }
  
  if (defer != SKUndefined && SKLiteralInGroup(defer,SKPreserveAspectRatio__deferLiterals) && align != SKUndefined && SKLiteralInGroup(align,SKPreserveAspectRatio__alignLiterals) && meetOrSlice != SKUndefined && SKLiteralInGroup(meetOrSlice,SKPreserveAspectRatio__meetOrSliceLiterals)) {
    return [NSString stringWithFormat:@"%@%@%@",SKLiteralString[self.defer],
       SKLiteralString[self.align],
       SKLiteralString[self.meetOrSlice]];
  }
  
  if (align != SKUndefined && SKLiteralInGroup(align,SKPreserveAspectRatio__alignLiterals) && meetOrSlice != SKUndefined && SKLiteralInGroup(meetOrSlice,SKPreserveAspectRatio__meetOrSliceLiterals)) {
    return [NSString stringWithFormat:@"%@%@",SKLiteralString[self.align],
       SKLiteralString[self.meetOrSlice]];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanPreserveAspectRatio(NSScanner* scanner, SKPreserveAspectRatio** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKPreserveAspectRatio* result = [[SKPreserveAspectRatio new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral align0;
    BOOL b0 = SKScanAlignForPreserveAspectRatio(scanner,&align0);
    if (b0) result.align = align0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKPreserveAspectRatio* result = [[SKPreserveAspectRatio new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral defer0;
    BOOL b0 = SKScanDeferForPreserveAspectRatio(scanner,&defer0);
    if (b0) result.defer = defer0;

    SKLiteral align1;
    BOOL b1 = SKScanAlignForPreserveAspectRatio(scanner,&align1);
    if (b1) result.align = align1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKPreserveAspectRatio* result = [[SKPreserveAspectRatio new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral defer0;
    BOOL b0 = SKScanDeferForPreserveAspectRatio(scanner,&defer0);
    if (b0) result.defer = defer0;

    SKLiteral align1;
    BOOL b1 = SKScanAlignForPreserveAspectRatio(scanner,&align1);
    if (b1) result.align = align1;

    SKLiteral meetOrSlice2;
    BOOL b2 = SKScanMeetOrSliceForPreserveAspectRatio(scanner,&meetOrSlice2);
    if (b2) result.meetOrSlice = meetOrSlice2;

    if (b0 && b1 && b2) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKPreserveAspectRatio* result = [[SKPreserveAspectRatio new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral align0;
    BOOL b0 = SKScanAlignForPreserveAspectRatio(scanner,&align0);
    if (b0) result.align = align0;

    SKLiteral meetOrSlice1;
    BOOL b1 = SKScanMeetOrSliceForPreserveAspectRatio(scanner,&meetOrSlice1);
    if (b1) result.meetOrSlice = meetOrSlice1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanPreserveAspectRatioArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanPreserveAspectRatio, NULL);
}

// SKOptionalNumber
@implementation SKOptionalNumber
@synthesize none;
@synthesize value;
@synthesize inherit;

- (id)init {
  self = [super init];
  if (self) { 
    none = SKUndefined;
    inherit = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  self.value = nil;
  [super dealloc];
}

- (NSString*)description { 
  if (none != SKUndefined && SKLiteralInGroup(none,SKNoneLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.none]];
  }
  
  if (inherit != SKUndefined && SKLiteralInGroup(inherit,SKInheritLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.inherit]];
  }
  
  if (value != nil) {
    return [NSString stringWithFormat:@"%@",value];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanOptionalNumber(NSScanner* scanner, SKOptionalNumber** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKOptionalNumber* result = [[SKOptionalNumber new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral none0;
    BOOL b0 = SKScanNone(scanner,&none0);
    if (b0) result.none = none0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKOptionalNumber* result = [[SKOptionalNumber new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral inherit0;
    BOOL b0 = SKScanInherit(scanner,&inherit0);
    if (b0) result.inherit = inherit0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKOptionalNumber* result = [[SKOptionalNumber new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    NSNumber* value0;
    BOOL b0 = SKScanNumber(scanner,&value0);
    if (b0) result.value = value0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanOptionalNumberArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanOptionalNumber, NULL);
}

// SKOptionalLength
@implementation SKOptionalLength
@synthesize value;
@synthesize inherit;
@synthesize normal;

- (id)init {
  self = [super init];
  if (self) { 
    inherit = SKUndefined;
    normal = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  self.value = nil;
  [super dealloc];
}

- (NSString*)description { 
  if (normal != SKUndefined && SKLiteralInGroup(normal,SKNormalLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.normal]];
  }
  
  if (inherit != SKUndefined && SKLiteralInGroup(inherit,SKInheritLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.inherit]];
  }
  
  if (value != nil) {
    return [NSString stringWithFormat:@"%@",value];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanOptionalLength(NSScanner* scanner, SKOptionalLength** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKOptionalLength* result = [[SKOptionalLength new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral normal0;
    BOOL b0 = SKScanNormal(scanner,&normal0);
    if (b0) result.normal = normal0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKOptionalLength* result = [[SKOptionalLength new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral inherit0;
    BOOL b0 = SKScanInherit(scanner,&inherit0);
    if (b0) result.inherit = inherit0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKOptionalLength* result = [[SKOptionalLength new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLength* value0;
    BOOL b0 = SKScanLength(scanner,&value0);
    if (b0) result.value = value0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanOptionalLengthArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanOptionalLength, NULL);
}

// SKTextDecoration
@implementation SKTextDecoration
@synthesize none;
@synthesize array;
@synthesize inherit;

- (id)init {
  self = [super init];
  if (self) { 
    none = SKUndefined;
    inherit = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  self.array = nil;
  [super dealloc];
}

- (NSString*)description { 
  if (none != SKUndefined && SKLiteralInGroup(none,SKNoneLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.none]];
  }
  
  if (inherit != SKUndefined && SKLiteralInGroup(inherit,SKInheritLiterals)) {
    return [NSString stringWithFormat:@"%@",SKLiteralString[self.inherit]];
  }
  
  if (array != nil && 1) {
    return [NSString stringWithFormat:@"%@",[array componentsJoinedByString:@" "]];
  }
  
  SKWarn(@"Cannot find suitable description %@", @"");
  return [super description];
}

@end

BOOL SKScanTextDecoration(NSScanner* scanner, SKTextDecoration** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKTextDecoration* result = [[SKTextDecoration new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral none0;
    BOOL b0 = SKScanNone(scanner,&none0);
    if (b0) result.none = none0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKTextDecoration* result = [[SKTextDecoration new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral inherit0;
    BOOL b0 = SKScanInherit(scanner,&inherit0);
    if (b0) result.inherit = inherit0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKTextDecoration* result = [[SKTextDecoration new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    NSArray* array0;
    BOOL b0 = SKScanArray(scanner,&array0,SKScanTextDecorationLiteral,NULL);
    if (b0) result.array = array0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanTextDecorationArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanTextDecoration, NULL);
}



BOOL SKScanDoubleQuotedString(NSScanner *scanner, NSString **ptr)
{
    // CURRENTLY DOES NOT RESOLVE ESCAPED CHARACTERS
    
    NSUInteger location = scanner.scanLocation;
    SKScanWhitespaces(scanner, nil);
    NSString *string = [[scanner string] substringFromIndex:scanner.scanLocation];
    NSRegularExpression *pattern = 
    [NSRegularExpression regularExpressionWithPattern:@"^\".*[^\\\\]\"|^\"\"" //
                                              options:0 
                                                error:nil];
    
    
    NSArray* matches = [pattern matchesInString:string options:0 
                                          range:NSMakeRange(0,[string length])];
    if ([matches count] == 0) {
        scanner.scanLocation = location;
        return NO;
    }
    NSRange range = [[matches objectAtIndex:0] rangeAtIndex:0];
    NSString *value;
    assert([scanner scanString:[string substringWithRange:range]
                    intoString:&value]);
    *ptr = [value substringWithRange:NSMakeRange(1, [value length]-2)];
    return YES;
}

BOOL SKScanSingleQuotedString(NSScanner *scanner, NSString **ptr)
{
    // CURRENTLY DOES NOT RESOLVE ESCAPED CHARACTERS
    
    NSUInteger location = scanner.scanLocation;
    SKScanWhitespaces(scanner, nil);
    NSString *string = [[scanner string] substringFromIndex:scanner.scanLocation];
    NSRegularExpression *pattern = 
    [NSRegularExpression regularExpressionWithPattern:@"^'.*[^\\\\]'|^''"
                                              options:0 
                                                error:nil];
    
    
    NSArray* matches = [pattern matchesInString:string options:0 
                                          range:NSMakeRange(0,[string length])];
    if ([matches count] == 0) {
        scanner.scanLocation = location;
        return NO;
    }
    NSRange range = [[matches objectAtIndex:0] rangeAtIndex:0];
    NSString *value;
    assert([scanner scanString:[string substringWithRange:range]
                    intoString:&value]);
    *ptr = [value substringWithRange:NSMakeRange(1, [value length]-2)];
    return YES;
}

BOOL SKScanString(NSScanner *scanner, NSString **ptr)
{
    NSUInteger location = scanner.scanLocation;
    SKScanWhitespaces(scanner, nil);
    NSString *val;
    if (SKScanDoubleQuotedString(scanner, &val)) {
      *ptr = val;
      return YES;
    }
    if (SKScanSingleQuotedString(scanner, &val)) {
      *ptr = val;
      return YES;
    }
    NSCharacterSet *characterSet = 
    [[NSCharacterSet characterSetWithCharactersInString:@", 	"] invertedSet];
    NSString* value;
    if ([scanner scanCharactersFromSet:characterSet intoString:&value]) {
        *ptr = value;
        return YES;
    }
    location = scanner.scanLocation;
    return NO;
}

BOOL SKScanStringArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanString, NULL);
}

BOOL SKScanWhitespaces(NSScanner* scanner, NSString** ptr)
{
  return [scanner scanCharactersFromSet:
          [NSCharacterSet whitespaceCharacterSet] 
                             intoString:ptr];
}
BOOL SKScanSeparator(NSScanner *scanner, NSString** ptr)
{
  NSUInteger location = [scanner scanLocation];
  NSString *wsp = @"";
  BOOL w = SKScanWhitespaces(scanner, &wsp);
  NSString *cma = @"";
  BOOL c = [scanner scanString:@"," intoString:&cma];
  if (w || c) {
    if (ptr) {
        *ptr = [NSString stringWithFormat:@"%@%@", wsp, cma];
    }
    return YES;
  }
  [scanner setScanLocation:location];
  return NO;
}
BOOL SKScanNumber(NSScanner* scanner, NSNumber** num)
{
  double value;
  SKScanWhitespaces(scanner, nil);
  BOOL s = [scanner scanDouble:&value];
  if (s) {
    *num = [NSNumber numberWithDouble:value];
  }
  return s;
}

BOOL SKScanNumberArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanNumber, NULL);
}

BOOL SKScanDouble(NSScanner* scanner, double* value)
{
    SKScanWhitespaces(scanner, nil);
    return [scanner scanDouble:value];
}