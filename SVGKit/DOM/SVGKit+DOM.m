// autogenerated
// autogenerated

#import "SVGKit+DOM.h"

BOOL SKScanArray(NSScanner* scanner, NSArray** ptr, 
                 BOOL (*SKScanFN)(NSScanner*, id*), NSArray* valid) {
  NSUInteger location = scanner.scanLocation;
  NSMutableArray *array = [[[NSMutableArray alloc] init] autorelease];
  BOOL first = YES;
  while (true) {
    NSUInteger location = scanner.scanLocation;
    if (!first && !SKScanSeparator(scanner, nil)) {
        break;
    }
    first = NO;
    SKScanWhitespaces(scanner, nil);
    id object;
    if (SKScanFN(scanner, &object)) {
        [array addObject:(id)object];
        continue;
    }
    [scanner setScanLocation:location];
    break;
  }
  BOOL success = NO;
  if (valid && [valid count] > 0) {
    for (NSNumber *number in valid) {
      if ([array count] == [number intValue]) {
        success = YES;
        break;
      }
    }
  }
  else success = YES;
  if (success) {
    *ptr = array;
    return YES;
  }
  scanner.scanLocation = location;
  return NO;
}

// All literals in SVG specification.
NSString* SKLiteralString[SKUndefined] = { 
  @"100",
  @"200",
  @"300",
  @"400",
  @"500",
  @"600",
  @"700",
  @"800",
  @"900",
  @"blink",
  @"bold",
  @"bolder",
  @"cm",
  @"caption",
  @"condensed",
  @"currentColor",
  @"deg",
  @"defer",
  @"disable",
  @"em",
  @"ex",
  @"expanded",
  @"extra-condensed",
  @"extra-expanded",
  @"grad",
  @"#",
  @"Hz",
  @"in",
  @"icon",
  @"inherit",
  @"italic",
  @"kHz",
  @"kerning",
  @"lighter",
  @"line-through",
  @"mm",
  @"magnify",
  @"matrix",
  @"meet",
  @"menu",
  @"message-box",
  @"narrower",
  @"none",
  @"normal",
  @"oblique",
  @"overline",
  @"pc",
  @"pt",
  @"px",
  @"%",
  @"rad",
  @"rgb",
  @"rgba",
  @"rotate",
  @"scale",
  @"semi-condensed",
  @"semi-expanded",
  @"skewX",
  @"skewY",
  @"slice",
  @"small-caps",
  @"small-caption",
  @"status-bar",
  @"translate",
  @"ultra-condensed",
  @"ultra-expanded",
  @"underline",
  @"wider",
  @"xMaxYMax",
  @"xMaxYMid",
  @"xMaxYMin",
  @"xMidYMax",
  @"xMidYMid",
  @"xMidYMin",
  @"xMinYMax",
  @"xMinYMid",
  @"xMinYMin",
};

BOOL SKScanLiteral(NSScanner* scanner, SKLiteral* ptr, SKLiteral* valid) {
  NSUInteger location = scanner.scanLocation;
  SKScanWhitespaces(scanner, nil);
  int i = 0;
  while(valid[i] != SKUndefined) {
    NSString *s = SKLiteralString[valid[i]];
    if ([scanner scanString:s intoString:nil]) {
      *ptr = valid[i];
      return YES;
    }
    i++;
  }
  scanner.scanLocation = location;
  return NO;
}

SKLiteral SKNoneLiterals[] = {
  SKNone,
};

BOOL SKScanNone(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKNoneLiterals);
}

SKLiteral SKColor__typeLiterals[] = {
  SKRGBA,SKRGB,SKHASH,SKCurrentColor,
};

BOOL SKScanTypeForColor(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKColor__typeLiterals);
}

SKLiteral SKFont__styleLiterals[] = {
  SKNormal,SKItalic,SKOblique,SKInherit,
};

BOOL SKScanStyleForFont(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKFont__styleLiterals);
}

SKLiteral SKPreserveAspectRatio__alignLiterals[] = {
  SKXMinYMin,SKXMidYMin,SKXMaxYMin,SKXMinYMid,SKXMidYMid,SKXMaxYMid,SKXMinYMax,SKXMidYMax,SKXMaxYMax,
};

BOOL SKScanAlignForPreserveAspectRatio(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKPreserveAspectRatio__alignLiterals);
}

SKLiteral SKNormalLiterals[] = {
  SKNormal,
};

BOOL SKScanNormal(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKNormalLiterals);
}

SKLiteral SKPreserveAspectRatio__deferLiterals[] = {
  SKDefer,
};

BOOL SKScanDeferForPreserveAspectRatio(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKPreserveAspectRatio__deferLiterals);
}

SKLiteral SKLength__unitLiterals[] = {
  SKPercent,SKEM,SKEX,SKPX,SKIN,SKCM,SKMM,SKPT,SKPC,
};

BOOL SKScanUnitForLength(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKLength__unitLiterals);
}

SKLiteral SKPreserveAspectRatio__meetOrSliceLiterals[] = {
  SKMeet,SKSlice,
};

BOOL SKScanMeetOrSliceForPreserveAspectRatio(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKPreserveAspectRatio__meetOrSliceLiterals);
}

SKLiteral SKInheritLiterals[] = {
  SKInherit,
};

BOOL SKScanInherit(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKInheritLiterals);
}

SKLiteral SKFont__variantLiterals[] = {
  SKNormal,SKSmallCaps,SKInherit,
};

BOOL SKScanVariantForFont(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKFont__variantLiterals);
}

SKLiteral SKKerningLiterals[] = {
  SKKerning,
};

BOOL SKScanKerning(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKKerningLiterals);
}

SKLiteral SKFrequency__unitLiterals[] = {
  SKHZ,SKKHZ,
};

BOOL SKScanUnitForFrequency(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKFrequency__unitLiterals);
}

SKLiteral SKFont__weightLiterals[] = {
  SKInherit,SKNormal,SKBold,SKBolder,SKLighter,SK100,SK200,SK300,SK400,SK500,SK600,SK700,SK800,SK900,
};

BOOL SKScanWeightForFont(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKFont__weightLiterals);
}

SKLiteral SKFont__stretchLiterals[] = {
  SKNormal,SKWider,SKNarrower,SKUltraCondensed,SKExtraCondensed,SKCondensed,SKSemiCondensed,SKSemiExpanded,SKExpanded,SKExtraExpanded,SKUltraExpanded,SKInherit,
};

BOOL SKScanStretchForFont(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKFont__stretchLiterals);
}

SKLiteral SKTransform__methodLiterals[] = {
  SKMatrix,SKRotate,SKTranslate,SKScale,SKRotate,SKSkewX,SKSkewY,
};

BOOL SKScanMethodForTransform(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKTransform__methodLiterals);
}

SKLiteral SKFont__literalLiterals[] = {
  SKCaption,SKIcon,SKMenu,SKMessageBox,SKSmallCaption,SKStatusBar,
};

BOOL SKScanLiteralForFont(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKFont__literalLiterals);
}

SKLiteral SKAngle__unitLiterals[] = {
  SKDEG,SKGRAD,SKRAD,
};

BOOL SKScanUnitForAngle(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKAngle__unitLiterals);
}

SKLiteral SKTextDecoration__decorationLiterals[] = {
  SKUnderline,SKOverline,SKLineThrough,SKBlink,
};

BOOL SKScanDecorationForTextDecoration(NSScanner* scanner, SKLiteral* ptr) {
  return SKScanLiteral(scanner, ptr, SKTextDecoration__decorationLiterals);
}


// SKColor
@implementation SKColor
@synthesize array;
@synthesize type;
@synthesize value;

- (id)init {
  self = [super init];
  if (self) { 
    type = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  array = nil;
  value = nil;
  [super dealloc];
}

@end

BOOL SKScanColor(NSScanner* scanner, SKColor** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanTypeForColor(scanner,&type0);
    if (b0 && type0 != SKInherit) b0=NO;
    if (b0) result.type = type0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanTypeForColor(scanner,&type0);
    if (b0 && type0 != SKHASH) b0=NO;
    if (b0) result.type = type0;

    NSString* value1;
    BOOL b1 = SKScanString(scanner,&value1);
    if (b1) result.value = value1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKColor* result = [[SKColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanTypeForColor(scanner,&type0);
    if (b0) result.type = type0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* array2;
    BOOL b2 = SKScanArray(scanner,&array2,SKScanNumber,NULL);
    if (b2) result.array = array2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanColorArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanColor, NULL);
}

// SKInnerColor
@implementation SKInnerColor
@synthesize array;
@synthesize type;
@synthesize value;

- (id)init {
  self = [super init];
  if (self) { 
    type = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  array = nil;
  value = nil;
  [super dealloc];
}

@end

BOOL SKScanInnerColor(NSScanner* scanner, SKInnerColor** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKInnerColor* result = [[SKInnerColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanTypeForColor(scanner,&type0);
    if (b0) result.type = type0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKInnerColor* result = [[SKInnerColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanTypeForColor(scanner,&type0);
    if (b0 && type0 != SKCurrentColor) b0=NO;
    if (b0) result.type = type0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKInnerColor* result = [[SKInnerColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanTypeForColor(scanner,&type0);
    if (b0 && type0 != SKHASH) b0=NO;
    if (b0) result.type = type0;

    NSString* value1;
    BOOL b1 = SKScanString(scanner,&value1);
    if (b1) result.value = value1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKInnerColor* result = [[SKInnerColor new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral type0;
    BOOL b0 = SKScanTypeForColor(scanner,&type0);
    if (b0) result.type = type0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* array2;
    BOOL b2 = SKScanArray(scanner,&array2,SKScanNumber,NULL);
    if (b2) result.array = array2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanInnerColorArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanInnerColor, NULL);
}

// SKLength
@implementation SKLength
@synthesize unit;
@synthesize value;

- (id)init {
  self = [super init];
  if (self) { 
    unit = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  [super dealloc];
}

@end

BOOL SKScanLength(NSScanner* scanner, SKLength** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKLength* result = [[SKLength new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    double value0;
    BOOL b0 = SKScanDouble(scanner,&value0);
    if (b0) result.value = value0;

    SKLiteral unit1;
    BOOL b1 = SKScanUnitForLength(scanner,&unit1);
    if (b1) result.unit = unit1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanLengthArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanLength, NULL);
}

// SKPreserveAspectRatio
@implementation SKPreserveAspectRatio
@synthesize defer;
@synthesize align;
@synthesize meetOrSlice;

- (id)init {
  self = [super init];
  if (self) { 
    defer = SKUndefined;
    align = SKUndefined;
    meetOrSlice = SKMeet;
  }
  return self;
}

- (void)dealloc { 
  [super dealloc];
}

@end

BOOL SKScanPreserveAspectRatio(NSScanner* scanner, SKPreserveAspectRatio** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKPreserveAspectRatio* result = [[SKPreserveAspectRatio new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral align0;
    BOOL b0 = SKScanAlignForPreserveAspectRatio(scanner,&align0);
    if (b0) result.align = align0;

    if (b0) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKPreserveAspectRatio* result = [[SKPreserveAspectRatio new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral defer0;
    BOOL b0 = SKScanDeferForPreserveAspectRatio(scanner,&defer0);
    if (b0) result.defer = defer0;

    SKLiteral align1;
    BOOL b1 = SKScanAlignForPreserveAspectRatio(scanner,&align1);
    if (b1) result.align = align1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKPreserveAspectRatio* result = [[SKPreserveAspectRatio new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral defer0;
    BOOL b0 = SKScanDeferForPreserveAspectRatio(scanner,&defer0);
    if (b0) result.defer = defer0;

    SKLiteral align1;
    BOOL b1 = SKScanAlignForPreserveAspectRatio(scanner,&align1);
    if (b1) result.align = align1;

    SKLiteral meetOrSlice2;
    BOOL b2 = SKScanMeetOrSliceForPreserveAspectRatio(scanner,&meetOrSlice2);
    if (b2) result.meetOrSlice = meetOrSlice2;

    if (b0 && b1 && b2) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKPreserveAspectRatio* result = [[SKPreserveAspectRatio new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral align0;
    BOOL b0 = SKScanAlignForPreserveAspectRatio(scanner,&align0);
    if (b0) result.align = align0;

    SKLiteral meetOrSlice1;
    BOOL b1 = SKScanMeetOrSliceForPreserveAspectRatio(scanner,&meetOrSlice1);
    if (b1) result.meetOrSlice = meetOrSlice1;

    if (b0 && b1) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanPreserveAspectRatioArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanPreserveAspectRatio, NULL);
}

// SKTransform
@implementation SKTransform
@synthesize values;
@synthesize method;

- (id)init {
  self = [super init];
  if (self) { 
    method = SKUndefined;
  }
  return self;
}

- (void)dealloc { 
  values = nil;
  [super dealloc];
}

@end

BOOL SKScanTransform(NSScanner* scanner, SKTransform** ptr) {
  NSUInteger location = scanner.scanLocation;
  {
    SKTransform* result = [[SKTransform new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral method0;
    BOOL b0 = SKScanMethodForTransform(scanner,&method0);
    if (b0 && method0 != SKMatrix) b0=NO;
    if (b0) result.method = method0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* values2;
    BOOL b2 = SKScanArray(scanner,&values2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:1],
        [NSNumber numberWithInt:3],nil]);
    if (b2) result.values = values2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  {
    SKTransform* result = [[SKTransform new] autorelease];
    NSUInteger location = scanner.scanLocation;
    
    SKLiteral method0;
    BOOL b0 = SKScanMethodForTransform(scanner,&method0);
    if (b0 && method0 != SKRotate) b0=NO;
    if (b0) result.method = method0;

    BOOL b1 = [scanner scanString:@"(" intoString:nil];

    NSArray* values2;
    BOOL b2 = SKScanArray(scanner,&values2,SKScanNumber,
      [NSArray arrayWithObjects:
        [NSNumber numberWithInt:1],
        [NSNumber numberWithInt:3],nil]);
    if (b2) result.values = values2;

    BOOL b3 = [scanner scanString:@")" intoString:nil];

    if (b0 && b1 && b2 && b3) {
      *ptr = result;
      return YES;
    }
    scanner.scanLocation = location;
  }
  scanner.scanLocation = location;
  return NO;
}

// Scan indeterminate sized array
BOOL SKScanTransformArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanTransform, NULL);
}



BOOL SKScanString(NSScanner *scanner, NSString **ptr)
{
    NSCharacterSet *characterSet = 
    [[NSCharacterSet characterSetWithCharactersInString:@", 	"] invertedSet];
    NSString* value;
    if ([scanner scanCharactersFromSet:characterSet intoString:&value]) {
        *ptr = value;
        return YES;
    }
    return NO;
}

BOOL SKScanStringArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanString, NULL);
}

BOOL SKScanWhitespaces(NSScanner* scanner, NSString** ptr)
{
  return [scanner scanCharactersFromSet:
          [NSCharacterSet whitespaceCharacterSet] 
                             intoString:ptr];
}
BOOL SKScanSeparator(NSScanner *scanner, NSString** ptr)
{
  NSUInteger location = [scanner scanLocation];
  NSString *wsp = @"";
  BOOL w = SKScanWhitespaces(scanner, &wsp);
  NSString *cma = @"";
  BOOL c = [scanner scanString:@"," intoString:&cma];
  if (w || c) {
    if (ptr) {
        *ptr = [NSString stringWithFormat:@"%@%@", wsp, cma];
    }
    return YES;
  }
  [scanner setScanLocation:location];
  return NO;
}
BOOL SKScanNumber(NSScanner* scanner, NSNumber** num)
{
  double value;
  SKScanWhitespaces(scanner, nil);
  BOOL s = [scanner scanDouble:&value];
  if (s) {
    *num = [NSNumber numberWithDouble:value];
  }
  return s;
}

BOOL SKScanNumberArray(NSScanner* scanner, NSArray** ptr) {
  return SKScanArray(scanner, ptr, SKScanNumber, NULL);
}

BOOL SKScanDouble(NSScanner* scanner, double* value)
{
    SKScanWhitespaces(scanner, nil);
    return [scanner scanDouble:value];
}